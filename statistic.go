package main

import (
	"fmt"
	"strings"
)

type winCountData struct {
	winCount   float64
	totalCount float64
}

type Statistic struct {
	data map[int32]map[int32]*winCountData
}

func (s *Statistic) Get(card []*Card) float64 {
	if len(card) != 2 {
		panic(card)
	}
	var a, b int32
	if card[0].Num < card[1].Num {
		a = card[0].Num
		b = card[1].Num
	} else {
		a = card[1].Num
		b = card[0].Num
	}
	if card[0].Color != card[1].Color {
		a, b = b, a
	}
	v := s.data[a][b]
	return v.winCount / v.totalCount
}

var stat = &Statistic{
	data: map[int32]map[int32]*winCountData{
		14: {
			14: {1155963.6702378977, 3237772},
			13: {1356926.254761887, 6480851},
			12: {1230294.9190474427, 6478334},
			11: {1137266.6595235793, 6474635},
			10: {1066474.2738092903, 6476278},
			9:  {917942.508333109, 6480892},
			8:  {875077.1285712493, 6477869},
			7:  {835169.5857141144, 6479375},
			6:  {798735.5488093703, 6477146},
			5:  {836673.7773807705, 6477933},
			4:  {811618.6511902668, 6476994},
			3:  {786997.5440473979, 6477538},
			2:  {757549.6380950137, 6477739},
		},
		13: {
			14: {896848.2119045414, 3238527},
			13: {942697.945237863, 3239155},
			12: {1170693.8988093196, 6481771},
			11: {1078813.5226188067, 6477564},
			10: {1010853.4761902686, 6483722},
			9:  {856927.9547617204, 6477597},
			8:  {759979.1369046267, 6481358},
			7:  {731405.9416665612, 6478874},
			6:  {703432.4249998918, 6481943},
			5:  {678085.959523697, 6477441},
			4:  {653923.2797618064, 6477213},
			3:  {636652.6226189513, 6475258},
			2:  {619188.2202380039, 6476745},
		},
		12: {
			14: {844825.6166665013, 3239636},
			13: {783922.2428570034, 3237692},
			12: {783214.7738093869, 3241383},
			11: {1034795.8738092977, 6478196},
			10: {966649.8309522142, 6475003},
			9:  {813416.5785712709, 6477520},
			8:  {713940.2428570306, 6477859},
			7:  {633205.4119046764, 6475045},
			6:  {612687.9726189643, 6475097},
			5:  {590787.4404761097, 6476445},
			4:  {570009.5059523052, 6478785},
			3:  {551119.3023808999, 6478951},
			2:  {535045.8678571263, 6477348},
		},
		11: {
			14: {800708.2166665458, 3239865},
			13: {748583.6702379794, 3235194},
			12: {709246.9059522862, 3235534},
			11: {655836.6309523217, 3241449},
			10: {949373.5321427224, 6475365},
			9:  {799284.8499998905, 6475163},
			8:  {698200.3976189581, 6476307},
			7:  {612366.5404761166, 6480461},
			6:  {539318.5166665874, 6477625},
			5:  {527315.3797618103, 6478915},
			4:  {507320.7321427837, 6477678},
			3:  {488256.1773809112, 6477208},
			2:  {473324.72499998106, 6475338},
		},
		10: {
			14: {769984.4488094205, 3239021},
			13: {723573.5047618088, 3239825},
			12: {688025.3642856353, 3239372},
			11: {667940.6999999341, 3240593},
			10: {559106.151190486, 3239535},
			9:  {803144.4726189527, 6475756},
			8:  {705163.8297618277, 6481900},
			7:  {617229.4392856415, 6478514},
			6:  {539686.3738094374, 6478101},
			5:  {474159.69880944997, 6474322},
			4:  {461566.1488094592, 6473033},
			3:  {444744.8416666279, 6475102},
			2:  {430025.0011904619, 6478707},
		},
		9: {
			14: {705306.0666665802, 3241320},
			13: {657846.8440475531, 3238353},
			12: {626133.0690475749, 3238540},
			11: {607915.0607142472, 3236386},
			10: {602214.1285714007, 3241409},
			9:  {474374.8095238414, 3239397},
			8:  {686287.4321427825, 6477010},
			7:  {614456.9976189809, 6473287},
			6:  {537309.1023808892, 6477042},
			5:  {466844.6726189966, 6484748},
			4:  {402311.34761903563, 6478445},
			3:  {393318.89880951867, 6472673},
			2:  {378651.7666666831, 6475485},
		},
		8: {
			14: {685657.0785713559, 3240091},
			13: {618435.3559523404, 3239691},
			12: {585933.9654761726, 3235660},
			11: {570386.9535714167, 3241005},
			10: {564389.2440476012, 3239182},
			9:  {550007.0202381006, 3239266},
			8:  {416492.5404762219, 3235590},
			7:  {625750.2773808904, 6483448},
			6:  {560319.5690475579, 6469007},
			5:  {488278.2988094753, 6476571},
			4:  {415602.7547618976, 6475229},
			3:  {357194.371428598, 6479821},
			2:  {349942.4166666967, 6478843},
		},
		7: {
			14: {665886.7380951772, 3240111},
			13: {608115.8083333012, 3239343},
			12: {552580.3964285691, 3239752},
			11: {533484.8619047652, 3235179},
			10: {528728.123809532, 3236910},
			9:  {520793.6511904939, 3239177},
			8:  {519972.55714288045, 3237992},
			7:  {371376.01190479286, 3236554},
			6:  {577397.0499999378, 6475679},
			5:  {518010.23214280483, 6480907},
			4:  {446720.0309523686, 6478504},
			3:  {377807.6559524009, 6476395},
			2:  {321393.65833338536, 6476953},
		},
		6: {
			14: {651446.0630951772, 3237953},
			13: {594024.8511904465, 3237315},
			12: {546518.5666666594, 3240255},
			11: {502502.53928572225, 3234374},
			10: {496245.488095244, 3238829},
			9:  {490828.36190477916, 3240410},
			8:  {493592.252380973, 3237235},
			7:  {498280.56785715895, 3237104},
			6:  {339507.3500000278, 3238757},
			5:  {549356.402380906, 6475293},
			4:  {489422.7940476099, 6474898},
			3:  {421207.2226190662, 6480900},
			2:  {352333.74047623033, 6480517},
		},
		5: {
			14: {665370.1238094575, 3236857},
			13: {584124.9976190217, 3236198},
			12: {535383.9154761914, 3235502},
			11: {500389.2000000021, 3240519},
			10: {467966.580952389, 3238015},
			9:  {458830.43333335174, 3239523},
			8:  {463080.16666668945, 3239738},
			7:  {473045.9404762106, 3240440},
			6:  {483606.7750000254, 3235618},
			5:  {312124.2345238356, 3238421},
			4:  {525593.0571428204, 6478636},
			3:  {466006.2523809457, 6483942},
			2:  {398267.4178571703, 6477356},
		},
		4: {
			14: {654491.3785713644, 3237862},
			13: {575940.2809523673, 3241771},
			12: {529635.5630952485, 3243388},
			11: {492739.76785715215, 3239790},
			10: {464150.73333333986, 3239522},
			9:  {431487.62023811927, 3236310},
			8:  {432433.0952381177, 3236039},
			7:  {441992.4845238338, 3241199},
			6:  {457909.2059524203, 3240543},
			5:  {470727.0059524096, 3236526},
			4:  {292079.8476190768, 3243112},
			3:  {434035.8321428702, 6481251},
			2:  {378929.945238136, 6476407},
		},
		3: {
			14: {643799.5309523267, 3238380},
			13: {568153.3309523712, 3240071},
			12: {519625.3952381198, 3237785},
			11: {483469.20476192643, 3238336},
			10: {457455.75952382636, 3239426},
			9:  {427395.69285717065, 3239588},
			8:  {405943.78809526993, 3240789},
			7:  {411590.357142891, 3240432},
			6:  {427989.42023813626, 3237637},
			5:  {446137.41547622223, 3237572},
			4:  {432070.16428575356, 3240733},
			3:  {274778.80000002944, 3237664},
			2:  {350255.89642861957, 6480953},
		},
		2: {
			14: {630407.0297618513, 3239012},
			13: {559999.5773809584, 3238164},
			12: {513750.79642860364, 3242169},
			11: {477829.7821428849, 3238402},
			10: {450618.70119049936, 3239642},
			9:  {421856.4023809875, 3241678},
			8:  {402520.81309527665, 3236165},
			7:  {384740.79642861325, 3237405},
			6:  {397082.5011905212, 3240297},
			5:  {414603.6511905198, 3238780},
			4:  {405199.1154762367, 3240898},
			3:  {395054.25714290637, 3240455},
			2:  {265137.2797619359, 3238920},
		},
	},
}

func (s *Statistic) String() string {
	var sb strings.Builder
	_, _ = sb.WriteString("     Ao     Ko     Qo     Jo     To     9o     8o     7o     6o     5o     4o     3o     2o")
	for i := int32(14); i >= 2; i-- {
		m := s.data[i]
		switch i {
		case 14:
			_, _ = sb.WriteString("\nAs ")
		case 13:
			_, _ = sb.WriteString("\nKs ")
		case 12:
			_, _ = sb.WriteString("\nQs ")
		case 11:
			_, _ = sb.WriteString("\nJs ")
		case 10:
			_, _ = sb.WriteString("\nTs ")
		default:
			_, _ = sb.Write([]byte{'\n', '0' + byte(i), 's', ' '})
		}
		for j := int32(14); j >= 2; j-- {
			v := m[j]
			if v.totalCount == 0 {
				_, _ = sb.WriteString(fmt.Sprintf("%5.2f%% ", 50.0))
			} else {
				_, _ = sb.WriteString(fmt.Sprintf("%5.2f%% ", float64(v.winCount)/float64(v.totalCount)*100.0))
			}
		}
	}
	return sb.String()
}
